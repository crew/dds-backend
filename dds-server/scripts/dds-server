#!/usr/bin/python
"""DDS XMPP Server Executable.

***** BEGIN LICENCE BLOCK *****

The Initial Developer of the Original Code is
The Northeastern University CCIS Volunteer Systems Group

Contributor(s):
  Alex Lee <lee@ccs.neu.edu>

***** END LICENCE BLOCK *****
"""

import gflags as flags
import xmpp
import logging
import os
import sys
import ConfigParser

flags.DEFINE_string('config_file', '/etc/dds-server.conf',
                    'Path to the configuration file')
flags.DEFINE_string('config_section', 'DEFAULT',
                    'Configuration file section to parse')
flags.DEFINE_string('log_file', None, 'Log file path')
flags.DEFINE_boolean('debug', False, 'Enable debugging')
flags.DEFINE_boolean('daemonize', True, 'Enable Daemon Mode')

FLAGS = flags.FLAGS

os.environ['DJANGO_SETTINGS_MODULE'] = 'dds.settings'

from dds.slide.models import Client
from dds.utils import generate_request


def daemonize():
    """Daemonizes the calling process."""
    first_child_pid = os.fork()

    if(first_child_pid == 0):
        # inside the first child
        second_child_pid = os.fork()

        # become session leader
        os.setsid()

        if(second_child_pid == 0):
            # inside the second child
            pass    
        elif(second_child_pid > 0):
            # inside the first child
            os._exit(os.EX_OK)
        else:
            # inside the first child with error
            os._exit(os.EX_OSERR)
    elif(first_child_pid > 0):
        # inside the parent
        os._exit(os.EX_OK)
    else:
        # inside the parent with error
        os._exit(os.EX_OSERR)

    # inside the second child

    # set umask to have no permissions
    os.umask(0)

    # change to the root directory so the directory doesn't lock
    os.chdir('/')

    # open devnull
    fd = os.open(os.devnull, os.O_RDWR)

    # redirect stdout and stderr to devnull
    os.dup2(fd, os.sys.stdin.fileno())
    os.dup2(fd, os.sys.stdout.fileno())
    os.dup2(fd, os.sys.stderr.fileno())

################################# HANDLERS ###################################

def presence_handle(dispatch, pr):
    """If a client sends presence, send its initial slides."""
    jid = pr.getAttr('from')
    type = pr.getAttr('type')
    logging.debug('Got presence handle from %s' % jid) 
    if(type != 'unavailable'):
        send_initial_slides(dispatch, jid)
    else:
        logging.info('%s : has gone offline.' % jid)

#################################### SERVER ##################################

def send_initial_slides(dispatch, jid):
    """Sends the initial slides to the Jabber id."""
    logging.info('%s : sending initial slides.' % jid)
    for slide in get_slides_for(jid.getStripped()):
        add_slide(dispatch, jid, slide)
    else:
        # The client is unregistered, send it a slide to that effect
        # TODO: Make this happen
        pass

def add_slide(dispatch, jid, slide):
    """Sends a parsed Slide object to the Jabber id."""
    logging.info('%s : sending slide %d.' % (jid, slide.pk))
    request = generate_request(slide.parse(), 'addSlide')

    iq = xmpp.Iq(to = jid, typ = 'set')
    iq.setQueryNS(xmpp.NS_RPC)
    iq.setQueryPayload(request)

    dispatch.send(iq)
    logging.info('%s : sent slide %d.' % (jid, slide.pk))

def get_slides_for(jid):
    """Return a list of the Slide objects for the Client with the given Jabber
    id."""
    c = get_client(jid)
    
    if c is None:
        return []
    return c.all_slides()

def get_client(jid):
    """ Gets the Client from Django, if one exists. """
    logging.debug('%s : looking for client in the database.' % jid)
    try:
        c = Client.objects.get(pk=jid)
    except:
        logging.debug('%s : client is not found.' % jid)
        return None
    return c


##################################### Main ###################################

def parse_config():
    config = ConfigParser.RawConfigParser()
    config.read(FLAGS.config_file)
    return [ config.get(FLAGS.config_section, 'username'),
             config.get(FLAGS.config_section, 'password'),
             config.get(FLAGS.config_section, 'resource'),
             config.get(FLAGS.config_section, 'server'),
             config.get(FLAGS.config_section, 'log'),
             config.getboolean(FLAGS.config_section, 'debug'), ]

def get_options():
    all_list = parse_config()

    if FLAGS.log_file:
        all_list[4] = FLAGS.log_file

    if FLAGS.debug:
        all_list[5] = FLAGS.debug

    return all_list

def alive(dispatch):
    try:
        dispatch.Process(1)
    except:
        logging.info('Connection closed.')
        return False
    return True

def main():
    (username, password, resource, server, log, debug) = get_options()

    if FLAGS.daemonize:
        daemonize()

    logging.basicConfig(level=logging.DEBUG,
                        format='%(asctime)s %(levelname)s %(message)s',
                        filename=log,
                        filemode='a')

    if debug:
        client = xmpp.Client(server=server)
    else:
        client = xmpp.Client(server=server, debug=[])
    try:
        client.connect()
    except:
        logging.debug('Connecting to server failed.')
        exit()

    try:
        client.auth(username, password, resource, sasl=False)
    except:
        logging.debug('Authorization failed.')
        exit()

    client.RegisterHandler('presence', presence_handle)
    client.sendInitPresence()

    logging.info('Connection started')

    while alive(client):
      pass

if __name__ == '__main__':
    FLAGS(sys.argv)
    main()
